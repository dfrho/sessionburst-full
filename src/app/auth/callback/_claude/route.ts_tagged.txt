<document><source>route.ts</source><document_content>import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'
import { CookieOptions } from 'next/headers'

export async function GET(request: Request) {
  try {
    const requestUrl = new URL(request.url)
    const code = requestUrl.searchParams.get('code')
    const next = requestUrl.searchParams.get('next') ?? '/dashboard'

    // If no code is present, redirect to login immediately
    if (!code) {
      console.log('No code provided in callback')
      return NextResponse.redirect(new URL('/auth/login', request.url))
    }

    const cookieStore = await cookies()
    const response = NextResponse.redirect(new URL(next, request.url))
    
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return cookieStore.get(name)?.value
          },
          set(name: string, value: string, options: CookieOptions) {
            response.cookies.set({
              name,
              value,
              ...options,
              path: '/',
              sameSite: 'lax',
              secure: process.env.NODE_ENV === 'production',
            })
          },
          remove(name: string, options: CookieOptions) {
            response.cookies.set({
              name,
              value: '',
              ...options,
              path: '/',
              maxAge: 0,
            })
          },
        },
      }
    )

    const { error } = await supabase.auth.exchangeCodeForSession(code)
    
    if (!error) {
      // Get the session after successful auth
      const { data: { session } } = await supabase.auth.getSession()
      
      if (session) {
        // Store the auth token for Browserbase
        response.cookies.set('browserbase-token', session.access_token, {
          path: '/',
          sameSite: 'lax',
          secure: process.env.NODE_ENV === 'production',
        })
      }
      
      return response
    }

    // Authentication failed
    console.error('Auth error:', error)
    return NextResponse.redirect(new URL('/auth/login', request.url))

  } catch (error) {
    // Catch any unexpected errors
    console.error('Unexpected error in auth callback:', error)
    return NextResponse.redirect(new URL('/auth/login', request.url))
  }
}</document_content></document>